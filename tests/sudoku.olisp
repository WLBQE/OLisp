(define (((int -> void) [int] -> void) int_iter)
  (lambda ((int -> void) [int] -> void) (func lst)
    (if (empty lst)
      (void)
      (begin (func (car lst)) (int_iter func (cdr lst))))))

(define ((int -> void) print_int)
  (lambda (int -> void) (num)
    (print num)))

(define ([[int]] board)
  (list [int]
    (list int 5 3 0 0 7 0 0 0 0)
    (list int 6 0 0 1 9 5 0 0 0)
    (list int 0 9 8 0 0 0 0 6 0)
    (list int 8 0 0 0 6 0 0 0 3)
    (list int 4 0 0 8 0 3 0 0 1)
    (list int 7 0 0 0 2 0 0 0 6)
    (list int 0 6 0 0 0 0 2 8 0)
    (list int 0 0 0 4 1 9 0 0 5)
    (list int 0 0 0 0 8 0 0 7 9)))

(define (([int] -> int) len)
  (lambda ([int] -> int) (lst)
    (if (empty lst)
      0
      (+ 1 (len (cdr lst))))))

(define (([int] int -> int) nth)
  (lambda ([int] int -> int) (lst n)
    (if (= n 1)
      (car lst)
      (nth (cdr lst) (- n 1)))))

(define (([[int]] int -> [int]) nth_list)
  (lambda ([[int]] int -> [int]) (lst n)
    (if (= n 1)
      (car lst)
      (nth_list (cdr lst) (- n 1)))))

(define (([[int]] int -> [int]) get_row)
  (lambda ([[int]] int -> [int]) (board n)
    (nth_list board n)))

(define (([[int]] int -> [int]) get_col)
  (lambda ([[int]] int -> [int]) (board n)
    (cons (nth (get_row board 1) n)
    (cons (nth (get_row board 2) n)
    (cons (nth (get_row board 3) n)
    (cons (nth (get_row board 4) n)
    (cons (nth (get_row board 5) n)
    (cons (nth (get_row board 6) n)
    (cons (nth (get_row board 7) n)
    (cons (nth (get_row board 8) n)
    (cons (nth (get_row board 9) n) (list int))))))))))))

(int_iter print_int (get_col board 4))
