(define (([int] -> int) len)
  (lambda ([int] -> int) (lst)
    (if (empty lst)
      0
      (+ 1 (len (cdr lst))))))


(define (([int] int -> [int]) sublist_from_head)
  (lambda ([int] int -> [int]) (lst l)
    (if (= l 0)
      (list int)
      (cons (car lst) (sublist_from_head (cdr lst) (- l 1))))))

(define (([int] int -> [int]) sublist_from_tail)
  (lambda ([int] int -> [int]) (lst l)
    (if (= l (len lst))
      lst
      (sublist_from_tail (cdr lst) l))))


(define (([int] [int] -> [int]) merge)
  (lambda ([int] [int] -> [int]) (list1 list2)
    (if (empty list1)
      list2
      (if (empty list2)
        list1
        (if (< (car list1) (car list2))
          (cons (car list1) (merge (cdr list1) list2))
          (cons (car list2) (merge list1 (cdr list2))))))))

(define (([int] -> [int]) sort)
  (lambda ([int] -> [int]) (lst)
    (if (= (len lst) 1)
      lst
      (merge (sort (sublist_from_head lst (/ (len lst) 2)))
             (sort (sublist_from_tail lst (- (len lst) (/ (len lst) 2))))))))

(define ([int] a) (list int 1 5 3 9 7))

(define ([int] result) (sort a))

(define (((int -> void) [int] -> void) int_iter)
  (lambda ((int -> void) [int] -> void) (func lst)
    (if (not (empty lst))
      (begin (func (car lst)) (int_iter func (cdr lst)))
      (void))))

(define ((int -> void) print_int)
  (lambda (int -> void) (num)
    (print num)))

(int_iter print_int result)
