(define (bool n) false)
(define (int func) 0)
(define (double num) 2.2)

(define ((int -> int) foo) (lambda (int -> int) (n) (+ n 1)))
(print (foo 2))

(define (((int -> int) int -> int) bar) (lambda ((int -> int) int -> int) (func num) (func num)))
(print (bar foo 5))

(define ((int -> void) boring) (lambda (int -> void) (n) (print n)))
(boring 666)

(define ((void -> double) a_double) (lambda (void -> double) () (begin (print 1.4) (* num 1.5))))
(print (a_double))

(define ((int -> int) fibonacci)
  (lambda (int -> int) (n)
    (if (or (= n 0) (= n 1))
      1
      (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))

(define (int result) (fibonacci (d2i 5.25)))
(print result)

(define ((int -> int) factorial)
  (lambda (int -> int) (n)
    (if (<= n 1)
      1
      (* (factorial (- n 1)) n))))

(define (int result2) (factorial 5))
(print result2)
