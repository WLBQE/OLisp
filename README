Group Members:
Libo Wang     lw2768@columbia.edu
Jiaqi Liu     jl4953@columbia.edu
Linli Wan     lw2780@columbia.edu
Zhixuan Zheng zz2486@columbia.edu


To build our compiler, first make sure that opam package 'llvm' is installed,
and the OCaml version is at least 3.12. Then, in the project root path, type:
  make

To run our test suite, first make sure that commands 'clang' and 'llc' are
properly linked. Then, in the project root path, type:
  ./test_all.sh

Test results will be printed to stdout, and any test failure will be logged in
'test_all.log'


Test programs

1. test_print.olisp (positive)
In the previous deliverable, our print function can only print integers, and the
program can only have one expression. Now, olisp can print function is fully
implemented, so it can print integers, doubles, booleans and strings. One
program can also have multiple expressions.

2. test_define.olisp (positive)
This test tests name binding and identifier lookup. It binds values to names,
and invoke the print function by those names.

3. test_begin.olisp (positive)
This test tests the begin function in OLisp. The begin function evaluates all
arguments in order, and returns the value of the last argument.

4. test_arithmetic.olisp (positive)
This test tests arithmetic operations in OLisp, including casts between integers
and doubles, and arithmetic operators (+, -, *, /, %).

5. test_logical.olisp (positive)
This test tests logical operations in OLisp, including logical operators (and,
or, not), and comparison operators (=, !=, <, >, <=, >=). Logical operators
accept booleans. All comparison operators accept integers and doubles. In
addition, = and != operators also accept booleans and strings. The comparison of
strings is implemented using external function 'strcmp'.

6. test_if.olisp (positive)
This test tests the conditional expression 'if'. Like in OCaml, 'if' in OLisp is
an expression. It is the only thing in OLisp that is lazy-evaluated, meaning the
else expression will not be evaluated if the predicate is true, and vice versa.

7. test_lambda.olisp (positive)
This test tests lambda expressions in OLisp. As an functional language, lambda
expression is a core feature of OLisp. Both recursion and first-class functions
are tested.

8. fail_add.olisp (negative)
In OLisp, built-in lambda '+' (i.e. add operator) can only be applied to two or
more arguments of the same type (either int or double). In this program, '+' is
applied to an integer and a double, which leads to a sematic error "double and
int do not match".

9. fail_call.olisp (negative)
In this program, lambda expression 'foo' takes an integer and returns an
integer. But 'foo' is then applied to a double, which leads to a semantic error
"double and int do not match".

10. fail_define.olisp (negative)
In OLisp, an global identifier can only be bound once. In this program, the
identifier 'a' is bound twice, which leads to a semantic error "identifier a is
already declared".
